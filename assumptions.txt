1) If a class extends another class, the class being extended does not have to be defined yet (i.e. if A extends B, B can be defined after A).
2) A field of a class cannot have the same name as the class it is declared in
3) We do not allow function overloading
4) We do not stop semantic analysis after a single error. The error is thrown but semantic analysis continues.
5) No functions, classes or variables cannot be named a reserve word (i.e. you cannot have a class named integer)
6) A variable cannot exceed 30 characters
7) +/- factor must be a real or an integer
8) If we find a mismatched type, we show error, but set the type to be the valid type in order to continue analysis to find more errors in order to give the user insight to all errors
9) An index expression list cannot be longer than one index expression (in variable_access). For exmample, the following is not allowed: a[1,2,3]
10) An actual param can only be an expression, not an expression:expression or expression:expression:expression (because we could not find anything in pascal to discern what that means).
11) As long as the variable access is valid, print statement allows any type
12) Expressions have a field "val" which we are not populating, because we purely doing semantic analysis. We are not actually evaluating expressions.
13) If you try to access a class that does not exist (i.e. a = new fake_class() and there is no "fake_class") than the program will exit immediately.
14) An array indice can only be checked for inbounds if it is a single literal (i.e. a[1]), we felt that evaluating expressions of literals was to be a part of code generation (i.e. a[1+2])
15) You cannot have a class attribute with the same name of the class (other than a constructor), but you can have a local variable (in a class function) with the same name of the class because we are not supporting static functions.
16) We are not supporting recursive structual equivalence.

WHAT WE ARE NOT HANDLING:
1) We do not check for a missing program class
2) We do not check for a function return value on the right hand side of an assignment statement 
3) We do not check if the return value of a function is set

TO COMPILE:
Simply make and run ./opc

FYI:
1) Make tests will fail, we did not format our errors the same
2) We ran the following command for the md5 of our project direcory:

md5 CSE440Proj1/* > md5.txt